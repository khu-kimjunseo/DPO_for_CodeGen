from typing import Tuple

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    """
    >>> even_odd_palindrome(5)
    (0, 1)
    >>> even_odd_palindrome(6)
    (1, 0)
    >>> even_odd_palindrome(7)
    (0, 1)
    >>> even_odd_palindrome(8)
    (1, 0)
    >>> even_odd_palindrome(9)
    (0, 1)
    >>> even_odd_palindrome(10)
    (1, 0)
    >>> even_odd_palindrome(11)
    (0, 1)
    >>> even_odd_palindrome(12)
    (1, 0)
    >>> even_odd_palindrome(13)
    (0, 1)
    >>> even_odd_palindrome(14)
    (1, 0)
    >>> even_odd_palindrome(15)
    (0, 1)
    >>> even_odd_palindrome(16)
    (1, 0)
    >>> even_odd_palindrome(17)
    (0, 1)
    >>> even_odd_palindrome(18)
    (1, 0)
    >>> even_odd_palindrome(19)
    (0, 1)
    >>> even_odd_palindrome(20)
    (1, 0)
    >>> even_odd_palindrome(21)
    (0, 1)
    >>> even_odd_palindrome(22)
    (1, 0)
    >>> even_odd_palindrome(23)
    (0, 1)
    >>> even_odd_palindrome(24)
    (1, 0)
    >>> even_odd_palindrome(25)
    (0, 1)
    >>> even_odd_palindrome(26)
    (1, 0)
    >>> even_odd_palindrome(27)
    (0, 1)
    >>> even_odd_palindrome(28)
    (1, 0)
    >>> even_odd_palindrome(29)
    (0, 1)
    >>> even_odd_palindrome(30)
    (1, 0)
    >>> even_odd_palindrome(31)
    (0, 1)
    >>> even_odd_palindrome(32)
    (1, 0)
    >>> even_odd_palindrome(33)
    (0, 1)
    >>> even_odd_palindrome(34)
    (1, 0)
    >>> even_odd_palindrome(35)
    (0, 1)
    >>> even_odd_palindrome(36)
    (1, 0)
    >>> even_odd_palindrome(37)
    (0, 1)
    >>> even_odd_palindrome(38)
    (1, 0)
    >>> even_odd_palindrome(39)
    (0, 1)
    >>> even_odd_palindrome(40)
    
def check(candidate):
    assert candidate(123) == (8, 13)
    assert candidate(12) == (4, 6)
    assert candidate(3) == (1, 2)
    assert candidate(63) == (6, 8)
    assert candidate(25) == (5, 6)
    assert candidate(19) == (4, 6)
    assert candidate(9) == (4, 5)
    assert candidate(1) == (0, 1)

def test_check():
    check(even_odd_palindrome)

test_check()
