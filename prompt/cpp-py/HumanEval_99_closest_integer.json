{
    "name": "HumanEval_99_closest_integer",
    "language": "py",
    "prompt": "def closest_integer(value: str) -> int:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_99_closest_integer.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n",
    "stop_tokens": [
        "\ndef",
        "\n#",
        "\nif",
        "\nclass"
    ],
    "translation_prompt": "### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\nlong closest_integer(std::string value) {\n    std::regex pattern(\"\\\\.0+$\");\n    value = std::regex_replace(value, pattern, \"\");\n    double num = std::stod(value);\n    if (value.back() == '5') {\n        if (num > 0) {\n            return std::ceil(num);\n        } else {\n            return std::floor(num);\n        }\n    } else {\n        return std::round(num);\n    }\n}\n\n### Python version\n\ndef closest_integer(value: str) -> int:\n"
}