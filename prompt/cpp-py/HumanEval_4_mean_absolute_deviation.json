{
    "name": "HumanEval_4_mean_absolute_deviation",
    "language": "py",
    "prompt": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n",
    "doctests": "keep",
    "original": "/Users/zilutang/Projects/code_translation/explain-then-translate/MultiPL-C2C/datasets/../datasets/originals/HumanEval_4_mean_absolute_deviation.py",
    "prompt_terminology": "remove",
    "source_program": "keep",
    "target_signature": "keep",
    "tests": "def check(candidate):\n    assert candidate([1.0, 2.0]) == 0.5\n    assert candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n\ndef test_check():\n    check(mean_absolute_deviation)\n\ntest_check()\n",
    "stop_tokens": [
        "\ndef",
        "\n#",
        "\nif",
        "\nclass"
    ],
    "translation_prompt": "### C++ version\n\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<vector>\n#include<sstream>\n#include<regex>\n#include<map>\n#include<set>\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n    float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();\n    float sum = 0;\n    for (auto x: numbers) {\n        sum += abs(x - mean);\n    }\n    return sum / numbers.size();\n}\n\n### Python version\n\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n"
}